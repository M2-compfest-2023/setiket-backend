@startuml
class CustomException extends HttpException
class MailingService {
    -transporter: nodemailer.Transporter
    -generalTemplate: handlebars.TemplateDelegate<any>
    -loadTemplate(templateName: string): handlebars.TemplateDelegate<any>
    +newEventOrganizer(name: string, email: string)
}
class PrismaService extends PrismaClient implements OnModuleInit {
    +onModuleInit(): Promise<void>
}
class AuthService {
    -prismaService: PrismaService
    -jwtService: JwtService
    -mailService: MailingService
    +login(loginDto: UserLoginDto)>
    +registerCustomer(registerDto: UserRegisterDto)>
    +registerEo(registerDto: EoRegisterDto)>
}
class CategoriesService {
    -prisma: PrismaService
    +getAllCategories()
    +getEventByCategory(id: number)
}
class EventService {
    -prisma: PrismaService
    +getAllEvents()
    +getEventById(eventId: number)
    +getEventSales(eventId: number)
    +getEventByUser(id: string)
    +createEvent(eventData: CreateEventDto, id: string)
    +updateEvent(eventId: number, eventData: UpdateEventDto)
    +deleteEvent(eventId: number)
    +getEventsByOrganizer(organizerId: number)
    +filterEvents(filterEvent: FilterEventDto)
    +approveEvent(eventId: number, approve: ApproveEventDto)
}
class LocationService {
    -prismaService: PrismaService
    +getAllProvince()
    +getAllCity(prov_id?: number)
}
class TicketsService {
    -prismaService: PrismaService
    +getPurchaseTicketByUserId(id: number)
    +createTicketPurchase(ticketData: CreateTicketDto, id: string)
    +deleteTicketPurchase(id: number)
}
class CustomException extends HttpException

class UsersService {
    -prismaService: PrismaService
    +getAllUsers()
    +getDetailUser(user_id: string)
    +getActivities()
    +getUserActivity(user_id: string)
    +approveEo(user_id: string, approve?: boolean)
    +isUserExist(user_id: string)
}
@enduml
